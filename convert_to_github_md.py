#!/usr/bin/env python3
"""
Script to convert a markdown file to a GitHub-compatible markdown file
since GitHub doesn't support HTML with inline styles.
We use SVG files to display rich text and control the styling.
"""

import re
import argparse
import sys
from pathlib import Path
import create_svg


def remove_style_block(content):
    # Get rid of the <style> block since we don't want it to show in github.
    style_pattern = r'<style>.*?</style>'
    return re.sub(style_pattern, '', content, flags=re.DOTALL)

def convert_company_table_to_markdown(company_table):
    # Every company is in the raw file as a markdown table with columns:
    # Company name, title, location, and timeline.  Each of these is wrapped in a
    # span with a class name so this function uses regex to extract the elements, 
    # in order to create an SVG file for each company.

    # Extract the company name, title, location, and timeline by using the span class names
    company_name = re.search(r'<span class="company-name">(.*?)</span>', company_table).group(1)
    title = re.search(r'<span class="position-title">(.*?)</span>', company_table).group(1)
    location = re.search(r'<span class="company-location">(.*?)</span>', company_table).group(1)
    timeline = re.search(r'<span class="position-timeline">(.*?)</span>', company_table).group(1)
    print("Found an entry for the company: ", company_name, title, location, timeline)

    # Create the SVG file
    filename = create_svg.main(company_name, title, location, timeline)

    markdown_link = f"![{company_name}](./{filename})"
    return markdown_link

def find_and_replace_header_table(content):
    # The name and social media icons don't render nicely in GH md
    # so instead we replace the entire block with the SVG file.
    header_table_pattern = r'<!-- START_HEADER_TABLE -->(.*?)<!-- END_HEADER_TABLE -->'
    replace_with = f"""
<!-- THIS CODE IS AUTOGENERATED! Any changes needed should be first made in raw_resume.md and (if needed) convert_to_github_md.py -->
# Karla Nunez
<a href="https://www.linkedin.com/in/karnu/"><img src="./icons/linkedin-icon.svg" width="24" height="24" alt="LinkedIn"></a>
<a href="https://github.com/BooNooNooNouS"><img src="./icons/github-icon.svg" width="24" height="24" alt="GitHub"></a>
<a href="https://gitlab.com/BooNooNooNouS"><img src="./icons/gitlab-icon.svg" width="24" height="24" alt="GitLab"></a>
<a href="mailto:karlacn@outlook.com"><img src="./icons/mail-icon.svg" width="24" height="24" alt="Email"></a>    
    """
    return re.sub(header_table_pattern, replace_with, content, flags=re.DOTALL)

def find_and_replace_company_headers(content):
    # Look for all the START and END _COMPANY_TABLE tags and process them.
    # Returns the content already modified.
    
    company_table_pattern = r'<!-- START_COMPANY_TABLE -->(.*?)<!-- END_COMPANY_TABLE -->'
    company_table_matches = re.finditer(company_table_pattern, content, re.DOTALL)
    
    for match in reversed(list(company_table_matches)):
        # full_match includes the START_COMPANY_TABLE and END_COMPANY_TABLE tags.  
        # company_table_content is only the content inside of those.
        full_match = match.group(0)
        company_table_content = match.group(1)
        
        # Convert the company table to markdown, and then replace the entirety with the md link
        markdown_link = convert_company_table_to_markdown(company_table_content)
        content = content.replace(full_match, markdown_link)
    
    return content

def main():
    parser = argparse.ArgumentParser(description='Convert a resume file to GitHub-compatible markdown')
    parser.add_argument('--input_file', type=str, help='The input resume file')
    parser.add_argument('--output_file', type=str, help='The output resume file')
    args = parser.parse_args()

    input_file = Path(args.input_file)
    output_file = Path(args.output_file)
    
    if not input_file.exists():
        print(f"Error: {input_file} not found!")
        sys.exit(1)
    

    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Find and replace all company table blocks with SVG markdown links
    content = find_and_replace_company_headers(content)
    content = find_and_replace_header_table(content)
    
    # Remove the style block since we don't want it to show in github
    content = remove_style_block(content)
    
    
    # Write the output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Successfully converted {input_file} to {output_file}")
    print("The file is now GitHub-compatible using standard markdown!")

if __name__ == '__main__':
    main()
